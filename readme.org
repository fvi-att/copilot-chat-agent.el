#+TITLE: Copilot Chat for Emacs with Agent Mode
#+AUTHOR: fvi-att (for agent-mode) Cédric Chépied (for

* Description
This plugin allows you to chat with GitHub copilot with Agent mode.
This feature is still WORKING IN PROGRESS.

Feel free to contribute, report issues or discuss new features.
** Copilot-Chat
this is fork of copilot-chat.el. If you want know detail, See https://github.com/chep/copilot-chat.el

* Installation
#+begin_src emacs-lisp
(use-package copilot-chat
  :load-path "/path/to/github-copilot-chat.el"
  :commands (copilot-chat-display copilot-chat)
  :config
  (setq copilot-chat-frontend 'org)
  (setq copilot-chat-backend 'curl)
  
  ;; Keybind（Optional）
  :bind (:map global-map
         ("C-c C-y" . copilot-chat-yank)
         ("C-c M-y" . copilot-chat-yank-pop)
         ("C-c C-M-y" . (lambda () (interactive) (copilot-chat-yank-pop -1)))))
  ;; Install dependencies
  (unless (package-installed-p 'aio)
    (package-install 'aio))
  (unless (package-installed-p 'request)
    (package-install 'request))
  (unless (package-installed-p 'transient)
    (package-install 'transient))
  (unless (package-installed-p 'polymode)
    (package-install 'polymode))
  (unless (package-installed-p 'markdown-mode)
    (package-install 'markdown-mode))
  (unless (package-installed-p 'shell-maker)
    (package-install 'shell-maker))
#+end_src


** Agent Mode
Agent Mode allows Copilot to automatically execute shell commands suggested in its responses. This feature includes safety mechanisms to prevent dangerous operations.

*** Enabling Agent Mode
#+begin_src emacs-lisp
;; Enable agent mode
(copilot-chat-agent-mode-enable)

;; Or toggle agent mode
(copilot-chat-agent-mode-toggle)

;; Check if agent mode is enabled
(copilot-chat-agent-mode-p)
#+end_src

*** Auto-run Levels
Set the auto-execution level based on your security preferences:

#+begin_src emacs-lisp
;; Set auto-run level (interactive)
(copilot-chat-agent-set-auto-run-level 'read-only)

;; Or set via customization
(setq copilot-chat-agent-auto-run-level 'safe)
#+end_src

Available levels:
- ~none~ - No automatic execution (manual confirmation required)
- ~read-only~ - Only safe read commands (~ls~, ~cat~, ~git status~, etc.)
- ~safe~ - Safe commands that don't destroy files (~mkdir~, ~touch~, ~git add~, etc.)
- ~write~ - Commands that can modify files (with restrictions)
- ~all~ - All commands except explicitly forbidden ones (dangerous, not recommended)

*** Using Agent Mode
1. Enable agent mode: ~(copilot-chat-agent-mode-enable)~
2. Set desired auto-run level: ~(copilot-chat-agent-set-auto-run-level 'read-only)~
3. Ask Copilot to help with tasks that involve shell commands
4. Commands in code blocks will be automatically detected and executed based on your safety level

*** Example Usage
#+begin_example
User: "Show me the current directory contents and create a new directory called 'test'"

Copilot: "I'll help you with that:

```bash
ls -la
mkdir test
ls -la
```
"

With agent mode enabled and level set to 'safe':
- `ls -la` will execute automatically (read-only command)
- `mkdir test` will execute automatically (safe command)
- `ls -la` will execute automatically to show the result
#+end_example

*** Safety Features
- Command classification by safety level
- Path traversal protection
- Forbidden command blacklist
- User confirmation for unsafe operations
- Execution logging and statistics
- Session-based temporary permissions

*** Agent Mode Functions
- ~(copilot-chat-agent-mode-enable)~ - Enable agent mode
- ~(copilot-chat-agent-mode-disable)~ - Disable agent mode
- ~(copilot-chat-agent-mode-toggle)~ - Toggle agent mode
- ~(copilot-chat-agent-set-auto-run-level LEVEL)~ - Set auto-execution level
- ~(copilot-chat-agent-statistics)~ - Display execution statistics
- ~(copilot-chat-agent-debug-info)~ - Show debug information
- ~(copilot-chat-agent-clear-log)~ - Clear execution log

*** Accessing via Transient Menu
Agent mode functions are available through the transient menu:
#+begin_src emacs-lisp
(copilot-chat-transient)  ; Main menu -> "A" for Agent
#+end_src

*** Troubleshooting
- ~(copilot-chat-quotas)~ display Github copilot current quotas.
- ~(copilot-chat-frontend-clean)~ clean the frontend. Useful if you want to change the frontend.
- ~(copilot-chat-clear-auth-cache)~ clear the auth cache for Copilot Chat. You will have to login again.
- ~(copilot-chat-reset-models)~: Reset the model cache and fetches models again. Useful when GitHub adds new models or updates model capabilities.
- If you cannot see your expected models in the set-model menu, visit https://github.com/copilot and check if the model is enabled for your account.

** Customizable variables
All variables can be customized using ~M-x customize-group RET copilot-chat RET~.

*** Backend
- ~copilot-chat-backend~ - Backend to use for API calls. Can be ~'curl~ (default) or ~'request~.
- ~copilot-chat-curl-program~ - Path to curl executable when using curl backend.
- ~copilot-chat-curl-proxy~ - Proxy configuration for curl backend. Supports HTTP/HTTPS/SOCKS protocols.
- ~copilot-chat-curl-proxy-insecure~ - Skip SSL verification for proxy connections in curl backend.
- ~copilot-chat-curl-proxy-user-pass~ - Proxy authentication credentials for curl backend.

*** Frontend
- ~copilot-chat-frontend~ - Frontend interface to use. Can be ~'org~ (default) or ~'markdown~.

*** Display
- ~copilot-chat-list-added-buffers-only~ - By default, buffer list displays all buffers and uses faces to highlight added buffer. If set to ~t~, only added buffer are displayed.
- ~copilot-chat-follow~ - If ~t~ (default is ~nil~), point follows answer in chat buffer.
- ~copilot-chat-list-show-path~ - If ~t~ (default), display file path in buffer list instead of buffer name.
- ~copilot-chat-list-show-relative-path~ - If ~t~ (default), show only relative path in buffer list.

*** Storage and cache
- ~copilot-chat-default-save-dir~ - Default directory to save chats.
- ~copilot-chat-github-token-file~ - File path to store GitHub authentication token.
- ~copilot-chat-token-cache~ - File path to store session token cache.

*** Model settings
- ~copilot-chat-default-model~ - Default AI model to use. Use ~(copilot-chat-set-model)~ to set it for a specific instance.
- ~copilot-chat-model-ignore-picker~ - If ~nil~ (default) add a filter to ~(copilot-chat-set-model)~ which will only show models with ~model_picker_enabled~ attribute.
- ~copilot-chat-models-cache-file~ - File path to cache fetched models.
- ~copilot-chat-models-fetch-cooldown~ - Minimum time between model fetch attempts in seconds (default: 5 minutes).

*** Prompts
Default prompts used by various commands:
- ~copilot-chat-org-prompt~ - Base org system prompt configuring Copilot's behavior.
- ~copilot-chat-markdown-prompt~ - Base markdown system prompt configuring Copilot's behavior.
- ~copilot-chat-prompt-explain~ - Prompt for explain command.
- ~copilot-chat-prompt-review~ - Prompt for code review command.
- ~copilot-chat-prompt-doc~ - Prompt for documentation command.
- ~copilot-chat-prompt-fix~ - Prompt for fix command.
- ~copilot-chat-prompt-optimize~ - Prompt for optimization command.
- ~copilot-chat-prompt-test~ - Prompt for test generation command.
- ~copilot-chat-commit-prompt~ - Prompt for generating commit messages.

*** Instruction Files
Copilot Chat supports custom instructions from GitHub repository:
- ~copilot-chat-use-copilot-instruction-files~ - Use custom instructions from ~.github/copilot-instructions.md~. Default is ~t~.
- ~copilot-chat-use-git-commit-instruction-files~ - Use custom git commit instructions from ~.github/git-commit-instructions.md~. Default is ~t~.
- ~copilot-chat-max-instruction-size~ - Maximum size in bytes of instruction files. Default is 65536 (64KB). Files exceeding this limit will be ignored. Set to ~nil~ for unlimited size.

** Key bindings
*** Prompt buffer
- ~C-c C-c~ send prompt. Answer will be written in chat buffer.
- ~C-c RET~ send prompt. Answer will be written in chat buffer.
- ~M-p~ previous prompt.
- ~M-n~ next prompt.
- ~C-c C-l~ open buffer list.
- ~C-c C-q~ bury buffer and delete window.
- ~C-c C-t~ open transient menu.

*** Buffer list buffer
- ~RET~ select or deselect buffer on point.
- ~space~ select or deselect buffer on point.
- ~C-c C-c~ clear buffer list.
- ~g~ refresh list.
- ~q~ bury buffer and delete window.


* Testing
** Running Tests
The test suite uses the ERT framework and focuses on core agent functionality without external dependencies.

** Command Line Test Execution
*** Run All Tests
#+begin_example
# Run the complete test suite (5/5 tests pass)
emacs -batch -L . -l tests/test-setup.el -l tests/test-copilot-chat-agent-command-classification.el -f ert-run-tests-batch-and-exit
#+end_example

*** Run Individual Test Cases
You can run specific test cases by their names:

#+begin_example
# Test dangerous command classification
emacs -batch -L . -l tests/test-setup.el -l tests/test-copilot-chat-agent-command-classification.el --eval "(ert-run-tests-batch 'test-command-classification-dangerous)"

# Test read-only command classification
emacs -batch -L . -l tests/test-setup.el -l tests/test-copilot-chat-agent-command-classification.el --eval "(ert-run-tests-batch 'test-command-classification-read-only)"

# Test safe command classification
emacs -batch -L . -l tests/test-setup.el -l tests/test-copilot-chat-agent-command-classification.el --eval "(ert-run-tests-batch 'test-command-classification-safe)"

# Test unknown command classification
emacs -batch -L . -l tests/test-setup.el -l tests/test-copilot-chat-agent-command-classification.el --eval "(ert-run-tests-batch 'test-command-classification-unknown)"

# Test complex commands with pipes and redirects
emacs -batch -L . -l tests/test-setup.el -l tests/test-copilot-chat-agent-command-classification.el --eval "(ert-run-tests-batch 'test-command-classification-with-complex-commands)"
#+end_example

*** Run Tests by Pattern
#+begin_example
# Run all tests matching a pattern
emacs -batch -L . -l tests/test-setup.el -l tests/test-copilot-chat-agent-command-classification.el --eval "(ert-run-tests-batch \"test-command-classification-\")"

# Run only dangerous and safe tests
emacs -batch -L . -l tests/test-setup.el -l tests/test-copilot-chat-agent-command-classification.el --eval "(ert-run-tests-batch '(or test-command-classification-dangerous test-command-classification-safe))"
#+end_example

*** Quick Test Shortcuts
For convenience, you can create aliases or shell functions:

#+begin_example
# Add to your .bashrc or .zshrc
alias test-agent="emacs -batch -L . -l tests/test-setup.el -l tests/test-copilot-chat-agent-command-classification.el -f ert-run-tests-batch-and-exit"
alias test-dangerous="emacs -batch -L . -l tests/test-setup.el -l tests/test-copilot-chat-agent-command-classification.el --eval \"(ert-run-tests-batch 'test-command-classification-dangerous)\""
alias test-safe="emacs -batch -L . -l tests/test-setup.el -l tests/test-copilot-chat-agent-command-classification.el --eval \"(ert-run-tests-batch 'test-command-classification-safe)\""
alias test-complex="emacs -batch -L . -l tests/test-setup.el -l tests/test-copilot-chat-agent-command-classification.el --eval \"(ert-run-tests-batch 'test-command-classification-with-complex-commands)\""
#+end_example

** Test Coverage
The focused test suite covers:
- **Command classification** (~test-copilot-chat-agent-command-classification.el~) - Tests the safety classification of shell commands including:
  - Basic command classification (read-only, safe, write, dangerous, forbidden)
  - Complex commands with pipes and redirects
  - Dangerous patterns detection (sudo, system file writes, etc.)
  - Unknown command handling

*** Available Test Cases
1. ~test-command-classification-read-only~ - Tests read-only commands like ~ls~, ~cat~, ~git status~
2. ~test-command-classification-safe~ - Tests safe commands like ~mkdir~, ~touch~, ~git add~
3. ~test-command-classification-dangerous~ - Tests dangerous commands like ~rm~, ~chmod~, ~curl~
4. ~test-command-classification-unknown~ - Tests handling of unknown/unrecognized commands
5. ~test-command-classification-with-complex-commands~ - Tests complex scenarios with pipes, redirects, and command chains

** Test Setup
The minimal test setup (~test-setup.el~) loads only essential core modules with minimal mocking, ensuring tests run quickly and reliably without external package dependencies.

* Notes
This plugin is unofficial and based on Copilot Chat for neovim repository: https://github.com/CopilotC-Nvim/CopilotChat.nvim

The prompt for git commit messages comes from [[https://github.com/ywkim/gpt-commit][gpt-commit]].

For GitHub copilot code completion in emacs, checkout [[https://github.com/copilot-emacs/copilot.el][copilot.el]]
